// Code generated by MockGen. DO NOT EDIT.
// Source: branch.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/hamillka/ppo/backend/internal/models"
)

// MockBranchRepository is a mock of BranchRepository interface.
type MockBranchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBranchRepositoryMockRecorder
}

// MockBranchRepositoryMockRecorder is the mock recorder for MockBranchRepository.
type MockBranchRepositoryMockRecorder struct {
	mock *MockBranchRepository
}

// NewMockBranchRepository creates a new mock instance.
func NewMockBranchRepository(ctrl *gomock.Controller) *MockBranchRepository {
	mock := &MockBranchRepository{ctrl: ctrl}
	mock.recorder = &MockBranchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBranchRepository) EXPECT() *MockBranchRepositoryMockRecorder {
	return m.recorder
}

// AddBranch mocks base method.
func (m *MockBranchRepository) AddBranch(name, address, phoneNumber string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBranch", name, address, phoneNumber)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBranch indicates an expected call of AddBranch.
func (mr *MockBranchRepositoryMockRecorder) AddBranch(name, address, phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBranch", reflect.TypeOf((*MockBranchRepository)(nil).AddBranch), name, address, phoneNumber)
}

// EditBranch mocks base method.
func (m *MockBranchRepository) EditBranch(id int64, name, address, phoneNumber string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditBranch", id, name, address, phoneNumber)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditBranch indicates an expected call of EditBranch.
func (mr *MockBranchRepositoryMockRecorder) EditBranch(id, name, address, phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditBranch", reflect.TypeOf((*MockBranchRepository)(nil).EditBranch), id, name, address, phoneNumber)
}

// GetAllBranches mocks base method.
func (m *MockBranchRepository) GetAllBranches() ([]*models.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBranches")
	ret0, _ := ret[0].([]*models.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBranches indicates an expected call of GetAllBranches.
func (mr *MockBranchRepositoryMockRecorder) GetAllBranches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBranches", reflect.TypeOf((*MockBranchRepository)(nil).GetAllBranches))
}

// GetBranchByID mocks base method.
func (m *MockBranchRepository) GetBranchByID(id int64) (models.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchByID", id)
	ret0, _ := ret[0].(models.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranchByID indicates an expected call of GetBranchByID.
func (mr *MockBranchRepositoryMockRecorder) GetBranchByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchByID", reflect.TypeOf((*MockBranchRepository)(nil).GetBranchByID), id)
}
